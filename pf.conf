#       $OpenBSD: pf.conf,v 1.2 2015/05/18 16:04:21 reyk Exp $
#
# See pf.conf(5) for syntax and examples.
# Remember to set net.inet.ip.forwarding=1 and/or net.inet6.ip6.forwarding=1
# in /etc/sysctl.conf if packets are to be forwarded between interfaces.

# Macros - https://www.openbsd.org/faq/pf/macros.html#macros
#-----------------------
#  Macros are an alias for something you want to use in a rule.
#  Macros may contain a list of entries (enclosed in curly braces) e.g. webserver = { http, https }
#  A list simplifies rules that apply across multiple services/IPs/subnets etc.
#  Macros are referred to later with a prepended dollar sign, e.g. allow in proto tcp to any port $webserver
#  Note that anchors loaded from external files will not be able to access the macros in this file

# Interfaces - run ifconfig to obtain the aliases for your box
#  You should declare all your interfaces. That way you can update them if drivers/devices change
lan = "{ em1, wl0 }" # LAN port(s)
wan = "{ em0 }"      # WAN port on dual ethernet NIC
vpn = "{ tl0 }"      # Tunnel interface(s) for vpn

# Subnets
lan_net = "{ 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8, fd00::/8 }" # LAN networks. You should trim this to only your network(s)
# Example - separate subnets on LAN (e.g. guest network):
users = "10.1.1.0/32"
gameconsoles = "10.1.2.0/32" # Subnet for game consoles - can prioritize bandwidth
smarthome = "10.1.3.0/32"    # Subnet for smart devices (TV/Printer/etc) - allows bandwidth prioritization and access restriction
guests = "10.1.4.0/32"       # Separate guests from access to user devices
untrusted = "{ $gameconsoles, $smarthome, $guests }"
# Example - multi-site VPN:
all_sites = "10.0.0.0/8" # Subnet(s) for all sites in VPN
site_1 = "10.1.0.0/16"   # Subnet(s) for first site
site_2 = "10.2.0.0/16"   # Subnet(s) for second site

# IPs
# Static IPs from the web (generally useful for site-to-site VPN)
site_1_ipv4 = "123.045.067.089"
site_2_ipv4 = "123.045.067.090"
vpn_servers = "{ $site_1_ipv4, $site_2_ipv4 }"

# Services
# Use this space to declare services not found in /etc/services, or to create lists of services
logins = "{ ssh }"   # List of login services - will ban users attempting bruteforce attacks
webserver = "{ http, https, ftp, sftp }" # Webserver services
ephem = "49152:65535" # The range of ephemeral ports - restrict LAN access to this range at your own peril
log_ports = "{ 0:65535 }" # Reduce the range if resources won't allow

# An example for how you may wish to use ephemeral ports is as follows:
#block from $smarthome to $users            # Block promiscuous smarthome devices
#pass from $smarthome to $users port $ephem # Allow services e.g. Chromecast -- I need to review if this is necessary, Chromecast may only require an outbound request from $users which is still permitted
# It won't do a great deal for security, but will separate an infected smart device from reaching assigned services, such as ssh

# Runtime options - https://www.openbsd.org/faq/pf/options.html
#-----------------------
#set block-policy drop          # How blocking occurs (default is "drop" i.e. don't acknowledge packets)
#set limit src-nodes 10000      # Maximum IPs to track state (default is 10,000 if unset)
#set limit states 10000         # Maximum states to track (default is 10,000 if unset)
#set limit tables 1000          # Maximum tables that can be created (default is 1,000 if unset)
#set limit table-entries 200000 # Maximum number of IPs/subnets that can be tracked across all tables (default depends on RAM)
set loginterface egress         # Interface to collect packet statistics on
set skip on lo                  # Don't apply firewall rules to loopback interface

# Antispoof settings - https://www.openbsd.org/faq/pf/filter.html#antispoof
#-----------------------
antispoof quick for { lo, $lan } # Protect the local interface and internal interface(s) from spoofing

# Tables - http://www.openbsd.org/faq/pf/tables.html
#-----------------------
# Persistent tables continue after reboot
# Tables can be saved to plaintext file with 'file' e.g. table <blocked> persist file "/etc/blocked"
# In this example file tables are defined in related .rule files

# Rules - https://www.openbsd.org/faq/pf/filter.html
#-----------------------
# Note that rules are processed according to last match in file, unless the "quick" parameter is set for a given match
# Always put default policies up top and override rules either below or quick

# Default policies
block all                                          # Default to block all traffic
block in log proto { udp, tcp } to port $log_ports # Log on log_ports (logging is overridden by any rules below)
pass out to egress all                             # Allow outbound traffic on the default route

# Quick blocking rules
#block in log quick proto { udp, tcp } from $untrusted to port ! $ephem # Block everything except ephemeral ports to untrusted lan (not for everyone)
block in log quick proto tcp from $untrusted to port $logins # Close the hole we open for logins

# Specific rules go below
#  Rules are in separate files loaded into anchors herein.
#  Note anchors loaded from file don't inherit macros, you might need to adjust some macros therein.
#  Anchors can be given filter rules for example:
#  anchor "lan/*" in proto tcp from $lan_net
#  Will force the anchor to only operate on the $lan_net ip space (as defined in the macros above)

# Available generic rules are as follows:
#  rate_ban.rule -- will add IPs to the <ban> table if too many connections are initiated
#  temporary_ban.rule -- will add abusive IPs to the <temporary_ban> table. Read the file for instructions on expiring entries from this table
#  bandwidth_limit.rule -- limit bandwidth for abusive IPs [NOT WRITTEN YET]

# ftp-proxy
anchor "ftp-proxy/*"
load anchor ftp-proxy from "./pf.d/ftp-proxy.rule"

# relayd
anchor "relayd/*"
load anchor relayd from "./pf.d/relayd.rule"

# spamd
anchor "spamd/*"
load anchor spamd from "./pf.d/spamd.rule"

# fail2ban
anchor "fail2ban/*"
load anchor fail2ban from "./pf.d/fail2ban.rule"

# fwknop
# If you don't want to allow fwknop to be overridden put it at the end
anchor "fwknop/*"
load anchor fwknop from "./pf.d/fwknop.rule"

# Rule for login attempts
anchor "logins/*" in proto tcp to port $logins # Anchor for traffic destined to login ports
load anchor logins from "./pf.d/rate_ban.rule" # Ban if a connection rate is exceeded

# Rules for login attempts from the lan users
anchor "lan_logins/*" in proto tcp to port $logins      # Anchor for traffic to login from lan
load anchor lan_logins from "./pf.d/temporary_ban.rule" # Ban if connection rate is exceeded to a list that is cleared regularly

# Mosh
anchor "mosh/*" in proto udp to port $mosh
load anchor mosh from "./pf.d/mosh.rule"

# Rules for webservices
anchor "web/*" in proto tcp to port $webserver
load anchor web from "./pf.d/temporary_ban.rule" # [TODO] I need to write a rule for limiting connection speed




# Default settings
#----------------------- 
# I need to figure out exactly what these are intended for...
#block return    # block stateless traffic
#pass            # establish keep-state

#block in quick from urpf-failed to any # use with care
