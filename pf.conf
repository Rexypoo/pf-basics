#       $OpenBSD: pf.conf,v 1.2 2015/05/18 16:04:21 reyk Exp $
#
# See pf.conf(5) for syntax and examples.
# Remember to set net.inet.ip.forwarding=1 and/or net.inet6.ip6.forwarding=1
# in /etc/sysctl.conf if packets are to be forwarded between interfaces.

# Macros - https://www.openbsd.org/faq/pf/macros.html#macros
#  Macros that aren't referenced by a rule aren't used, so it's okay to have too many declarations
#  If you aren't using the device for NAT, DHCP, or as a gateway most of these don't matter
#-----------------------

# Interfaces - run ifconfig to obtain the aliases for your box
lan = "em1"  # LAN port on dual ethernet NIC
wan = "em0"  # WAN port on dual ethernet NIC
wlan = "wl0" # Wifi device

# Subnets
lan_net = "{ 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8, fd00::/8 }" # LAN networks. You should trim this to only your network(s)
# Example - separate subnets on LAN (e.g. guest network):
users = "{ 10.1.1.0/32 }"
gameconsoles = "{ 10.1.2.0/32 }" # Subnet for game consoles - can prioritize bandwidth
smarthome = "{ 10.1.3.0/32 }"    # Subnet for smart devices (TV/Printer/etc) - allows bandwidth prioritization and access restriction
guests = "{ 10.1.4.0/32 }"       # Separate guests from access to user devices
# Example - multi-site VPN:
all_sites = "{ 10.0.0.0/8 }" # Subnet(s) for all sites in VPN
site_1 = "{ 10.1.0.0/16 }"   # Subnet(s) for first site
site_2 = "{ 10.2.0.0/16 }"   # Subnet(s) for second site

# IPs
# Local IPs - these will rarely be required
dhcp_server = "{ 10.1.0.1 }"
dns_server = "{ 10.1.0.1 }"
# Static IPs from the web (generally useful for site-to-site VPN)
site_2_servers = "{ 123.045.067.089, 123.045.067.090 }"

# Services
# Use this space to declare services not found in /etc/services, or to create lists of services
mosh = "60000:61000" # Note mosh is a UDP protocol. This is an example of a service not in /etc/services
logins = "{ ssh }"   # An example of a service list for use in subsequent firewall rules
webserver = "{ http, https, ftp, sftp }" # An example of another service list with multiple services
ephem = "49152:65535" # The range of ephemeral ports - restrict LAN access to this range at your own peril
tcp_log_ports = "{ 0:65535 } " Range(s) of ports to log blocked packets on, note if it's all ports (as specified in this example) you don't actually need to specify the ports
udp_log_ports = "{ 0:65535 } " Range(s) of ports to log blocked packets on, note if it's all ports (as specified in this example) you don't actually need to specify the ports

# An example for how you may wish to use ephemeral ports is as follows:
#block from $smarthome to $users            # Block promiscuous smarthome devices
#pass from $smarthome to $users port $ephem # Allow services e.g. Chromecast -- I need to review if this is necessary, Chromecast may only require an outbound request from $users which is still permitted
# It won't do a great deal for security, but will separate an infected smart device from reaching assigned services, such as ssh


# increase default state limit from 10'000 states on busy systems
#set limit states 100000

set skip on lo

# filter rules and anchor for ftp-proxy(8)
#anchor "ftp-proxy/*"
#pass in quick inet proto tcp to port ftp divert-to 127.0.0.1 port 8021

# anchor for relayd(8)
#anchor "relayd/*"
 
block return    # block stateless traffic
pass            # establish keep-state
 
# rules for spamd(8)
#table <spamd-white> persist
#table <nospamd> persist file "/etc/mail/nospamd"
#pass in on egress inet proto tcp from any to any port smtp \
#    divert-to 127.0.0.1 port spamd
#pass in on egress proto tcp from <nospamd> to any port smtp
#pass in log on egress proto tcp from <spamd-white> to any port smtp
#pass out log on egress proto tcp to any port smtp


#block in quick from urpf-failed to any # use with care

# By default, do not permit remote connections to X11
block return in on ! lo0 proto tcp to port 6000:6010
